{
    "LeetCode": {
        "prefix": "core",
        "scope": "go",
        "body": [
            "package main",
            "",
            "// https://github.com/Gopher0727/template",
            "",
            ""
        ]
    },
    "acm": {
        "prefix": "acm",
        "scope": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"bufio\"",
            "    \"os\"",
            ")",
            "",
            "var (",
            "    in  = bufio.NewReader(os.Stdin)",
            "    out = bufio.NewWriter(os.Stdout)",
            ")",
            "",
            "func solve() {",
            "    $0",
            "}",
            "",
            "func main() {",
            "    defer out.Flush()",
            "",
            "    solve()",
            "}"
        ]
    },
    "acms": {
        "prefix": "acms",
        "scope": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"bufio\"",
            "    \"fmt\"",
            "    \"os\"",
            ")",
            "",
            "var (",
            "    in  = bufio.NewReader(os.Stdin)",
            "    out = bufio.NewWriter(os.Stdout)",
            ")",
            "",
            "func solve() {",
            "    $0",
            "}",
            "",
            "func main() {",
            "    defer out.Flush()",
            "",
            "    var T int",
            "    fmt.Fscan(in, &T)",
            "",
            "    for range T {",
            "        solve()",
            "    }",
            "}"
        ]
    },
    "in": {
        "prefix": "Fscan",
        "scope": "go",
        "body": "fmt.Fscan(in, &$0)",
    },
    "out-f": {
        "prefix": "Fprintf",
        "scope": "go",
        "body": "fmt.Fprintf(out, \"$0\")",
    },
    "out-ln": {
        "prefix": "Fprintln",
        "scope": "go",
        "body": "fmt.Fprintln(out, $0)",
    },
    "order": {
        "prefix": "order",
        "scope": "go",
        "body": [
            "ord := make([]int, $1)",
            "for i := range ord {",
            "    ord[i] = i",
            "}",
            "sort.Slice(ord, func(i, j int) bool {",
            "    i, j = ord[i], ord[j]",
            "    return $0",
            "})"
        ]
    },
    "二分查找": {
        "prefix": "binaryfind",
        "scope": "go",
        "body": [
            "check := func(x int) bool {",
            "",
            "}",
            "",
            "lo, hi := $0",
            "for lo+1 < hi {",
            "    mid := lo + (hi-lo)/2",
            "    if check(mid) {",
            "",
            "    } else {",
            "        ",
            "    }",
            "}"
        ]
    },
    "上下左右": {
        "prefix": "dir",
        "scope": "go",
        "body": [
            "dx = [4]int{1, 0, -1, 0}",
            "dy = [4]int{0, 1, 0, -1}"
        ]
    },
    "周围": {
        "prefix": "dir_around",
        "scope": "go",
        "body": [
            "dx = [8]int{1, 0, -1, 0, 1, 1, -1, -1}",
            "dy = [8]int{0, 1, 0, -1, 1, -1, 1, -1}"
        ]
    },
    "四角": {
        "prefix": "dir_corner",
        "scope": "go",
        "body": [
            "dx = [4]int{-1, -1, 1, 1}",
            "dy = [4]int{1, -1, -1, 1}"
        ]
    },
    "马": {
        "prefix": "dir_horse",
        "scope": "go",
        "body": [
            "dx = [8]int{1, 1, 2, 2, -1, -1, -2, -2}",
            "dy = [8]int{2, -2, 1, -1, 2, -2, 1, -1}"
        ]
    },
    "常用运算": {
        "prefix": "calc",
        "scope": "go",
        "body": [
            "$0",
            "",
            "type Integer interface {",
            "   ~int | ~int8 | ~int16 | ~int32 | ~int64 | ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64",
            "}",
            "",
            "func abs[T Integer](x T) T {",
            "   if x < 0 {",
            "       return -x",
            "   }",
            "   return x",
            "}",
            "",
            "func divmod[T Integer](x, y T) (T, T) {",
            "   return x / y, x % y",
            "}",
            "",
            "func gcd[T Integer](a, b T) T {",
            "   for b > 0 {",
            "       a, b = b, a%b",
            "   }",
            "   return a",
            "}",
            "",
            "func lcm[T Integer](a, b T) T {",
            "   return a * b / gcd(a, b)",
            "}",
            "",
            "func qpow[T, V Integer](x T, n V, mod T) T {",
            "   res := T(1)",
            "   for ; n > 0; n >>= 1 {",
            "       if n&1 == 1 {",
            "           res = res * x % mod",
            "       }",
            "       x = x * x % mod",
            "   }",
            "   return res",
            "}"
        ]
    }
}
