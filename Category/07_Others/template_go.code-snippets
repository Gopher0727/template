{
    "acm": {
        "prefix": "acm",
        "scope": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"bufio\"",
            "    \"os\"",
            ")",
            "",
            "// https://github.com/Gopher0727/template",
            "",
            "var (",
            "    in  = bufio.NewReader(os.Stdin)",
            "    out = bufio.NewWriter(os.Stdout)",
            ")",
            "",
            "func solve() {",
            "    $0",
            "}",
            "",
            "func main() {",
            "    defer out.Flush()",
            "",
            "    solve()",
            "}",
        ]
    },
    "acms": {
        "prefix": "acms",
        "scope": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"bufio\"",
            "    \"fmt\"",
            "    \"os\"",
            ")",
            "",
            "// https://github.com/Gopher0727/template",
            "",
            "var (",
            "    in  = bufio.NewReader(os.Stdin)",
            "    out = bufio.NewWriter(os.Stdout)",
            ")",
            "",
            "func solve() {",
            "    $0",
            "}",
            "",
            "func main() {",
            "    defer out.Flush()",
            "",
            "    var T int",
            "    fmt.Fscan(in, &T)",
            "",
            "    for range T {",
            "        solve()",
            "    }",
            "}"
        ]
    },
    "in": {
        "prefix": "Fscan",
        "scope": "go",
        "body": "fmt.Fscan(in, &$0)",
    },
    "out-f": {
        "prefix": "Fprintf",
        "scope": "go",
        "body": "fmt.Fprintf(out, \"$0\")",
    },
    "out-ln": {
        "prefix": "Fprintln",
        "scope": "go",
        "body": "fmt.Fprintln(out, $0)",
    },
    "order": {
        "prefix": "order",
        "scope": "go",
        "body": [
            "ord := make([]int, $1)",
            "for i := range ord {",
            "    ord[i] = i",
            "}",
            "sort.Slice(ord, func(i, j int) bool {",
            "    i, j = ord[i], ord[j]",
            "    return $0",
            "})",
        ]
    }
}
