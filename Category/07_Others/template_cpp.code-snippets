{
    "LeetCode": {
        "prefix": "core",
        "scope": "cpp",
        "body": [
            "#include <bits/stdc++.h>",
            "#ifdef LOCAL",
            "#include \"LeetCode.hpp\"",
            "#include \"debug.h\"",
            "#else",
            "#define debug(...) void(0)",
            "#endif",
            "using i64 = long long;",
            "",
            "$0",
            "",
            "#ifdef LOCAL",
            "int main() {",
            "    //",
            "",
            "    return 0",
            "}",
            "#endif"
        ]
    },
    "acm": {
        "prefix": "acm",
        "scope": "cpp",
        "body": [
            "#include <bits/stdc++.h>",
            "",
            "#ifdef LOCAL",
            "#include \"debug.h\"",
            "#endif",
            "",
            "using namespace std;",
            "using i64 = long long;",
            "",
            "void solve() {",
            "    $0",
            "}",
            "",
            "int main() {",
            "    ios::sync_with_stdio(false);",
            "    cin.tie(nullptr);",
            "",
            "    solve();",
            "",
            "    return 0;",
            "}"
        ]
    },
    "acms": {
        "prefix": "acms",
        "scope": "cpp",
        "body": [
            "#include <bits/stdc++.h>",
            "",
            "#ifdef LOCAL",
            "#include \"debug.h\"",
            "#endif",
            "",
            "using namespace std;",
            "using i64 = long long;",
            "",
            "void solve() {",
            "    $0",
            "}",
            "",
            "int main() {",
            "    ios::sync_with_stdio(false);",
            "    cin.tie(nullptr);",
            "",
            "    int T;",
            "    cin >> T;",
            "    while (T--) {",
            "        solve();",
            "    }",
            "",
            "    return 0;",
            "}"
        ]
    },
    "MOD_1'000'000'007": {
        "prefix": "MOD_1'000'000'007",
        "scope": "cpp",
        "body": "static constexpr int MOD = 1'000'000'007;"
    },
    "MOD_9998244353": {
        "prefix": "MOD_998244353",
        "scope": "cpp",
        "body": "static constexpr int MOD = 998244353;"
    },
    "inf": {
        "prefix": "inf",
        "scope": "cpp",
        "body": "static constexpr $1 inf = $0;"
    },
    "readFromFile": {
        "prefix": "freopen",
        "scope": "cpp",
        "body": [
            "#ifdef LOCAL",
            "    // freopen(\"in.txt\", \"r\", stdin);",
            "    // freopen(\"out.txt\", \"w\", stdout);",
            "#endif",
        ]
    },
    "UDLR": {
        "prefix": "UDLR",
        "scope": "cpp",
        "body": [
            "void go(int& x, int& y, char ch) {",
            "    if (ch == 'U') {",
            "        x--;",
            "    } else if (ch == 'D') {",
            "        x++;",
            "    } else if (ch == 'L') {",
            "        y--;",
            "    } else if (ch == 'R') {",
            "        y++;",
            "    }",
            "}",
        ]
    },
    "二分查找": {
        "prefix": "binaryfind",
        "scope": "cpp",
        "body": [
            "auto check = [&](auto x) {",
            "    $0",
            "    return true;",
            "};",
            "",
            "int lo = 0, hi = 1E9;",
            "while (lo + 1 < hi) {",
            "    auto mid = lo + (hi - lo) / 2;",
            "",
            "    if (check(mid)) {",
            "",
            "    } else {",
            "        ",
            "    }",
            "}"
        ]
    },
    "上下左右": {
        "prefix": "dir",
        "scope": "cpp",
        "body": [
            "static constexpr int dx[] = {1, 0, -1, 0};",
            "static constexpr int dy[] = {0, 1, 0, -1};"
        ]
    },
    "周围": {
        "prefix": "dir_around",
        "scope": "cpp",
        "body": [
            "static constexpr int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};",
            "static constexpr int dy[] = {0, 1, 0, -1, 1, -1, 1, -1};"
        ]
    },
    "四角": {
        "prefix": "dir_corner",
        "scope": "cpp",
        "body": [
            "static constexpr int dx[] = {-1, -1, 1, 1};",
            "static constexpr int dy[] = {1, -1, -1, 1};"
        ]
    },
    "马": {
        "prefix": "dir_horse",
        "scope": "cpp",
        "body": [
            "static constexpr int dx[] = {1, 1, 2, 2, -1, -1, -2, -2};",
            "static constexpr int dy[] = {2, -2, 1, -1, 2, -2, 1, -1};"
        ]
    },
    "init": {
        "prefix": "init",
        "scope": "cpp",
        "body": [
            "auto init = [] {",
            "    $0",
            "    return 0;",
            "}();"
        ]
    },
    "initWithVal": {
        "prefix": "initWithVal",
        "scope": "cpp",
        "body": [
            "auto $1 = [&] {",
            "    $0",
            "}();"
        ]
    },
    "lambda": {
        "prefix": "lambda",
        "scope": "cpp",
        "body": [
            "auto $1 = [&]($0) {",
            "    ",
            "};",
            "$1();"
        ]
    },
    "lambda递归": {
        "prefix": "lambda_rec",
        "scope": "cpp",
        "body": [
            "auto $1 = [&](auto&& $1, $0) {",
            "    ",
            "};",
            "$1($1);"
        ]
    },
    "lambda递归23版": {
        "prefix": "lambda23_rec",
        "scope": "cpp",
        "body": [
            "auto $1 = [&](this auto&& $1, $0) {",
            "    ",
            "};",
            "$1();"
        ]
    },
    "prefix": {
        "prefix": "prefix",
        "scope": "cpp",
        "body": [
            "vector<i64> pre(n + 1);",
            "for (int i = 0; i < n; i++) {",
            "    pre[i + 1] = pre[i] + a[i];",
            "}"
        ]
    },
    "suffix": {
        "prefix": "suffix",
        "scope": "cpp",
        "body": [
            "vector<i64> suf(n + 1);",
            "for (int i = n - 1; i >= 0; i--) {",
            "    suf[i] = suf[i + 1] + a[i];",
            "}"
        ]
    },
    "随机数生成": {
        "prefix": "random",
        "scope": "cpp",
        "body": [
            "mt19937_64 gen(chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count());",
            "uniform_int_distribution<int> disInt(8e8, 9e8);",
            "uniform_real_distribution<int> disReal(8e8, 9e8);",
            "auto rnd = disInt(gen); // 固定值"
        ]
    },
    "下标排序": {
        "prefix": "order",
        "scope": "cpp",
        "body": [
            "vector<int> ord($1);",
            "iota(ord.begin(), ord.end(), 0);",
            "sort(ord.begin(), ord.end(), [&](int i, int j)-> bool { return $0 ;});"
        ]
    },
    "priority_queue": {
        "prefix": "priority_queue",
        "scope": "cpp",
        "body": [
            "#include <ext/pb_ds/priority_queue.hpp>",
            "",
            "__gnu_pbds::priority_queue<$1, ${2:less<>}, __gnu_pbds::pairing_heap_tag> pq;"
        ]
    }
}
